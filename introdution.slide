Introdução à linguagem Go (golang)

Michel Aquino
globo.com
michel.has@gmail.com
https://github.com/michelaquino

* Go

.image images/mascot.png

.image images/google.png

* História

- Projeto interno do Google iniciado em 2007
- Lançado como projeto de código aberto em 2009
- Versão 1 lançada em 2012

* Criadores

.image images/creators.png

- Robert Griesemer (V8 JavaScript engine, Java HotSpot)
- Rob Pike (UTF-8, Unix)
- Ken Thompson (UTF-8, B, Unix)

* Motivação

- Longos períodos de compilação 
- Dificuldade de escalar o desenvolvimento de grandes aplicações
- Programação concorrente custosa

* Premissa

- Open Source (https://github.com/golang)
- Simples
- Performática
- Legível
- Compilação rápida

* Porque usar Go?

- Linguagem estática
- Leve (usa pouca memória)
- Performática (15000 req/s em uma máquina 1 core e 256MB de memória)
- Trabalhar com concorrência é fácil
- Compilação extremamente rápida
- Garbage collector
- Fortemente tipada

* Quem usa?

- Globo.com
- Heroku
- Github
- Digital Ocean
- Docker
- Uber
- Dropbox
- Twitter
- Facebook
- Google
- várias outras...

* Montando o ambiente

.code code/config_environment

obs: Dentro do workspace deve conter os diretórios bin, src, pkg

* Sintaxe básica

* Hello World

.play code/hello_world.go

* Variáveis e constantes

.play code/variables_and_constants.go

* Array

.play code/array.go

* Slice

.play code/slice.go

* Map

.play code/map.go

* Estrutura de controle IF

.play code/if.go

* Estrutura de controle SWITCH

.play code/switch.go

* Estrutura de repetição FOR 1/2

.play code/for1.go

* Estrutura de repetição FOR 2/2

.play code/for2.go

* Funções

.play code/functions.go

* Closure

.play code/closure.go

* Defer

Última ação a ser executada antes do return ou fim do contexto

.play code/defer.go

* Ponteiros

* Struct

* Interfaces

* Tratamento de erros

* Panic
- panic: Lança um erro em tempo de execução

* Recover
- recover: recupera a mensagem de panic disparada 


* Polimorfismo

* Goroutines

* Channels

* Próximos passos